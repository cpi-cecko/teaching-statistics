 1. Categorical vs Numerical
 2. Discrete vs Continuous
 3. Viewing categorical data
    -- table
    -- factor
    -- barplot
    -- pie charts are bad idea
 4. Viewing numerical data
    -- mean, var, sd, median, fivenum, summary
    -- difference between fivenum and quantiles
    -- eliminating outliers
    -- stem-and-leaf charts
    -- categorizing numerical data
    -- histograms, rug
    -- boxplots
    -- loading external data
    -- densities

 ***

  Днес ще си говорим за едномерни данни. Всъщност, аз днес ще ви разкажа
  история, пък после ще го видим.

  Та, имало един древен грък, който много обичал да разделя света на части.
  Този грък се казвал Аристотел и той е един от основателите на съвременния
  научен подход. Скука, скука, скука... Та, на някой от неговите последователи
  му скимнало, че в света има данни, пък те били разделени на категорни и
  числови. Категорните данни слагали неща в кутийки. Те разделяли хората на
  раси, бирата на марки, населението на класи. Числовите данни пък ни казвали
  колко бира има в една каса, времето да стигнеш от тук до 4-ти километър,
  какво количество хора отново ще се движат от лявата страна на ескалатора. И
  за да ни е още по-приятно, числовите данни били разделени на дискретни и
  непрекъснати. Дисккретните числови данни се занимавали с точни количества -
  средно десет човека са нужни за да сменят една крушка, ако три котки ти
  пресечат пътя, може би е на лошо... Непрекъснатите, пък се заниват с неточни
  количества - времето да стигнеш от тук до морето, средното тегло шоколад,
  което можеш да изядеш преди да почнеш да харесваш какао още повече.

  И сега, бидейки снабдени с тези знания, ние ще видим как с R можем да
  анализираме данни. Поредният последовател на Аристотел, се оказал статистик
  и той направил някакво проучване. Някакво е доста умаловажаваща дума - той
  изследвал трите понятия "пиян като животно", "пиян на мотика" и "свеж като
  краставичка". Ходил по центъра на София и питал хората кое понятие най-много
  им допада. В крайна сметка събрал следните данни:

    > PKJ - "пиян като животно"
    > PNM - "пиян на мотика"
    > SKK - "свеж като краставичка"
    > phrases = c("PNM", "PKJ", "PNM", "PNM", "SKK", "PNM", "PKJ", "PKJ", "PKJ",
    + "PNM", "SKK", "PNM", "SKK")

  Тези данни били категорни - имало три вида фрази и за всяка от тях имаме
  някакво количество на предпочитания. Това с R можем да го представим по
  няколко начина. Първият е `table'.

    > table(phrases)

  Виждаме, че най-популярната фраза е "пиян на мотика", а най-непопулярната е
  "свеж като краставичка".

  Ако искаме да видим категориите определени от нашите данни можем да
  използваме командата factors. Така, ако имаме данни stages, показващи
  стадиите на мозъчно затормозяване на средно пиещ индивид, ние лесно ще можем
  да извлечем от тях различните категории.

    > stages = c("жив", "жив", "спи, но диша", "малко съм пиян", 
    + "малко съм пиян", "кои са тия ора?", "спи, но диша")
    > factor(stages)

  Естествено, ние не сме примитивни хора и се кефим на изкуството. Поради тая
  причина, разполагаме с много як инструмент за показване на категорни данни,
  наречен barplot. С този инструмент е разполагал и нашия Аристотелов
  последовател и това му е помогнало да види, че популярността на фразите,
  които изследвал оформяла лицеприятна фигурка.

    > barplot(table(phrases))

  Този barplot рисува колони пропорционални на количеството на дадена
  категория в таблицата. Понеже, ако му дадем чистите данни, той няма как да
  се сети да извика table върху тях, ние му ги поднасяме в красив вид.

    > barplot(table(phrases)/length(phrases))

  По този начин, пък намираме какъв процент популярност има всяка фраза
  измежду трите.

  Рано в своята кариера, статистикът направил грешката да използва barplot
  върху необработени данни. Той правил изследване върху зайчета, които (1)
  ядяли само моркови, (2) ядяли само зеле или (3) не обичали да ги изследват
  самозвани статистици. Опитал се да анализира данните:

    > rabs = c(1,1,2,3,3,3,3,1,2,1,3,3,1,1,1,2,1,3)
    > barplot(rabs)

  Естествено, получил твърде много категории. barplot работи с колони в
  таблици. Колкото колони имаме - толкова са ни категориите. В случая, имаме
  13 колони във вектора rabs. За да получим коректния брой колони, използваме
  table и резултата подава на barplot.

    > barplot(table(rabs))

  Всички обичаме pie charts. Без статистиците, естествено. pie чартовете са
  лоши и рядко има случай, в който човек би ги използвал и би останал
  неопетнен след това.

  Сега ще си говорим за числови данни.

  В средата на осемнайсти век имало един учен, който бил страшно вдъхновен от
  това да гледа насекоми. Бил страшно щастлив, защото тези животинки били
  лесни за хранене, гальовни, чувствителни и винаги го слушали, особено когато
  им казвал, че всичките до един ще ги научи да говорят човешки. Естествено,
  менталиката на този учен често била поставяна под въпрос. На него и на
  домашните му любимци, обаче, рядко им пукало за това.

  Един ден, галейки любимата си калинка, той се зачудил колко дни живеят
  бръмбарите му. Бидейки поредния последовател на Аристотел, той знаел за
  научния подход. В продължение на месец събирал, събирал и събирал данни. В
  крайна сметка, получил следния вектор:

    > live = c(5,10,4,3,6,20,4,5,6,8) # живот на бръмбари в дни

  Запознат с основите на още неразработения тогава език R, той се сдобил с
  проста информация за извадката си:

    > mean(live)
    > var(live)
    > sd(live)
    > median(live)
    > fivenum(live)
    > summary(live)

  И тук историята спряла, защото нещо трябвало да бъде обяснено на ученците. А
  именно, разликата между `fivenum' и `summary'.

  `fivenum' е функция, която за даден вектор от данни, ни дава min, max,
  median, lower и upper hinge. `summary' е функция, която за даден вектор от
  данни ни дава min, max, median, mean, 1st и 2nd quantile.

  Сега, тук идва въпросът каква е разликата между hinge и quantile. Така,
  медианата на някакви данни е чисълцето, което се намира по средата на тия
  данни. Позицията ѝ е равна на (n+1)/2, където n е броят на нашите данни.
  Квантилът генерализира формулата за медианата. Той ни дава позицията, на
  която се намира това число, за което 100p% от данните са по-малки от него, а
  100(1-p)% от данните са по-големи от него. Формулката е проста - 1 + (n-1)p.
  Така например, за нашата извадка live имаме следните данни:

    > sort(live)
     [1]  3  4  4  5  5  6  6  8 10 20

  При тях числото по средата е между 5 и 6. За да сме точни, взимаме средно
  аритметично на двете числа и получаваме, че медианата е 5.5. Сега 25%-ният
  квантил се намира на позиция 1 + (n-1)p, което е 3.25. Демек, той се намира
  на 1/4 от третото число. Третото число е 4, 1/4 от 5-4 е 0.25. Значи
  25%-ният квантил е 4.25. По подобен начин намираме 75%-ният квантил.

  Нещото наречено hinge, е алтернатива на квантила. lower hinge е медианата на
  данните лежащи в ляво от медианата на всички данни без да включваме нея. 
  upper hinge е медианата на данните лежащи в дясно от медианата на всички
  данни без да включваме нея. Така, за вектора live, данните в ляво от
  медианата са - 3 4 4 5 5, а медианата на тия данни е 4. Данните в дясно от
  медианата са - 6 6 8 10 20, а медианата им е 8.

  След това дълго, но изключително важно обяснение, е време да преминем
  нататък. Ученият, който ще наречем Кранкенщайн, искал да получи много добра
  представа за характера на неговите данни. Той се възползвал от нещото
  наречено boxplot.

    > boxplot(live, horizontal=T)

  Тази графика му показала много работи. На първо място, тя имала три линии.
  Първата показвала 1-ви квантил, 2-рата медианата, а 3-тата 3-ти квантил.
  Имала и два мустака, които или означавали min и max на данните, или били
  ограничени до 1.5 по дължината на кутията. С това ограничение било възможно
  много лесно да се видят вероятни outlier-и - данни, които не съвпадат с
  останалите. Наистина, Кранки видял такъв outlier - бръмбарът който живял цели
  20 дни. За 20 дни един бръмбар може да направи много с живота си. Този
  специфичен екземпляр стигнал до там, че успял да се сноши с костенурка.
  Ученият решил да остави проблема с бръмбара за после. Поради тая причина той
  решил да го махне от данните си и да изчисли средното без него.

    > mean(live,trim=1/10)

  Това премахнало 1/10 от данните намиращи се най-вляво на live и най-вдясно
  на live. Това ще рече, че освен премахването на outlier-a 20, ние сме
  премахнали и числото 3.

  По този начин получихме някаква по-добра оценка за средното на нашите данни.
  Сега ще видим и метод, чрез който можем да получим по-добра оценка за
  стандартното ни отклонение.

    > IQR(live)

  Тази функция дава разликата между 3-ти и 1-ви квантил.

  Получавайки тия данни, ученият заключил, че бръмбарите му живеят средно 6 дни
  +-3 дни.

  Великите мозъци не се задоволяват с едно единствено изследване. Кранкенщайн
  страшно много обичал тревата. Тази, обикновената де - райграса. Поради тая
  причина той желаел да комбинира любовта си към насекомите с любовта си към
  зеленината. Той създал игра, в която бълхи трябвало да скачат от стрък на
  стрък за да стигнат до дадена дестинация. Която бълха направила най-малко
  подскоци печелила. По време на първия шампионат Кранки събрал следните данни
  за подскоци на всяка бълха:

    > jumps = c(3,5,10,11,12,4,4,5,15,0,0,1,4,5,6,4,3,2,3,10,14,13,12,5)

  Ученият страшно искал да види разпределението на тия данни. Първото, което
  направил бе да използва stem-and-leaf диаграма.

    > stem(jumps)

  Тя много добре показвала разпределението на данните чрез текст. Работела за
  малко на брой данни и се използвала лесно. Числото в ляво на ствола
  показвало порядъка на наблюдението, числото в дясно се прибавяло към този
  порядък за да се получи стойността на наблюдението.

  Понеже тази диаграма била малко трудна за разчитане, Кранки решил да се
  възползва от хистограмите. Освен, че те били по-прости, те били и много
  удобни за представяне на голямо количество данни. Хистограмата дефинира
  няколко интервала, в които разполага данните. За всеки интервал, по оста y
  тя отпечатва честотата на наблюденията.

    > hist(jumps)

  Ако искаме да видим пропорцията на всяко наблюдение, използваме параметъра
  prob. Пропорцията на всяко наблюдение е такова число, което показва каква
  част от цялото окупира дадено наблюдение. В нашия случай, например,
  наблюдението 15 е само ~0.02 от всички наблюдения. Освен това, с функцията
  jitter можем да покажем къде се намира всяко наше наблюдение. Комбинирано
  с rug, ние можем да сложим тези данни под хистограмата:

    > hist(jumps, prob=T)
    > rug(jitter(jumps))

  Отново наблюдаваме нещо много интересно - има дупка в подскоците. Къде точно
  е тя, можем да разберем като погледнем stem-and-leaf плота. Ако пък
  искаме да разделим данните си на определени от нас интервали, може да
  използваме параметъра breaks:

    > hist(jumps, breaks=c(0,3,5,6,7,8,9,10,max(jumps)))
    > hist(jumps, 10)

  Кранки искал да раздели бълхите си в три категории, спрямо които да създаде
  единицата на Кранкенщайн за умствени и спортни възможности на бълхоподобните
  насекоми. Тази единица била с три величини: [0,5) - "обикновени", [5,14) -
  "средни", [14,Inf) - "скачачи". Освен това, той искал да види как неговите
  бълхи се разпределят в тези категории:

    > cats = cut(jumps, breaks=c(-1,5,14,Inf))
    > levels(cats) = c("обикновени","средни","скачачи")
    > table(cats)

  Доволен от продуктивния си ден, Кранки отишъл в близката кръчма с няколко от
  своите домашни любимци, взел си лимонада и, мислейки за кръглостта на своето
  лице, я изпил и заспал.

-- Подгрявка

  Числови или категорни?
    -- Времето, за което човек сглабя пъзел
    -- Популярност на операционна система
    -- Сложност на алгоритъм
    -- Време за изпълнение на алгоритъм

  Задача 1.11

-- Следните функции ще са полезни за задачите:

    > par с mfrow параметър
    > head, library, ?<data_set>

    защо нареждаме числата си?

  Сега ще си поговорим защо графиките ни са наредени. Нека започнем с
  изследването на група категорни данни.

  Питали сме 325 човека как биха оценили качеството на образованието в
  България. Оценките са от A до D в низходящ ред. Получили сме следните данни,
  които изобразяваме чрез barplot:

    > rates = data.frame("Grade"=c(35,200,70,20),
    +                    row.names=c("A","B","C","D"))
    > barplot(rates$Grade, names=rownames(rates))

  Наредбата в barplot-a е единствено от значение за това как интерпретираме
  информацията, защото той не представя последователни данни, а само слага
  разни неща в кутийки.

  Оценките, които използваме (A,B,C,D) имат наредба. Следователно, когато
  гледаме графиката им, ние ще очакваме тази наредба да бъде спазена и спрямо
  това ще направим изводите си за данните. Ще видим, че с A са гласували 35
  човека, с B - 200, с C - 70, с D - 20. Ако стълбовете на тези оценки бяха
  разбъркани, има опасност да объркаме човека или обществото, което се опитва
  да си направи извод от нашите данни.

  Сега, нека видим друга ситуация. Разглеждаме какво количество бонбони по
  цвят има в кутийка M&Ms. Получили сме следните данни:

    > sweets = c("Brown", "Red", "Yellow", "Brown", "Orange", "Yellow",
    +            "Green", "Red", "Orange", "Blue", "Blue", "Brown", "Green",
    +            "Green", "Blue", "Brown", "Blue", "Brown", "Blue", "Brown",
    +            "Orange")

  Ако просто barplot-нем тия данни, ще получим някаква наредба, която не ни
  показва възможно най-ясно какви заключения бихме могли да си направим от
  това, с което разполагаме:

    > barplot(table(sweets), col=topo.colors(6))

  Например, ние може да искаме да видим какъв цвят бонбони се среща най-често:

    > barplot(sort(table(sweets), decreasing=T), col=topo.colors(6))

  Или пък най-малко:

    > barplot(sort(table(sweets)), col=topo.colors(6))

  Изводът е, че когато работим с категорни данни и желаем да ги нарисуваме
  чрез barplot, трябва да помислим какво най-ясно искаме да покажем на хората,
  които гледат тия данни. След като сме измислили това, вече преценяваме как
  да го реализираме чрез подредбата на нашите данни в графиката.

  Сега, нека погледнем още категорни данни в githut.info.

  Идва ред на числовите данни.

  Тридесет човека са попитани колко кафета пият седмично. Получени са следните 
  данни.

    > coffee = c(26,20,15,15,21,16,17,17,27,29,24,19,19,24,19,17,26,21,13,29,
    +            23,16,23,17,23,21,24,13,19,17)

  Желаем да видим какво е разпределението на тези данни. Тоест, колко човека
  пият 0 кафета седмично, колко пият 1 кафе седмично, колко пият 2 кафета
  седмично, ..., и така нататък. Удобен инструмент за това е хистограмата. По
  оста х тя ще ни покаже бройката изпити кафета на седмица, а по оста y -
  колко човека са пили дадената бройка.

    > hist(coffee, col=topo.colors(10))

  Когато представяме дадено разпределение е много важна наредбата на данните,
  защото спрямо нея виждаме формата на разпределението. При категорните данни,
  подредбата беше важна единствено от гледна точка на това по-лесно да
  разбираме какви изводи да си правим от данните - най-често срещана стойност,
  оценки за дадена услуга. При числовите данни, наредбата е от значение за
  това как ще изчислим изводите, които бихме си направили от нашите
  наблюдения. Още повече, наредбата там идва натурално от наредбата на числата
  върху оста x. Ако разбъркаме тия числа, ще си направим грешни заключения за
  експеримента, който правим.

    защо се намира средното точно по този начин?

  TODO: Примерът от IntroStat
