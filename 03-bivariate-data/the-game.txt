 1. Why bivariate data?
 2. Handling categorical bivariate data
    -- Plotting tabular data
    -- The `apply` function
 3. Handling categorical vs numerical data
 4. Handling numerical bivariate data
 5. `attach`/`detach`
 6. Plotting graphs using R

 ***

  -- Обяснете какво е статистика на дете в 5-ти клас:
    5 минути брейнсторм. После всеки излиза и се опитва да ми обясни
    какво е статистика. Аз съм момиченце в 5-ти клас. Искам:
    а/ Да разбера какво е статистика
    б/ След обяснението да бъда супер запален на тази тема

 ***
   
  Продължаваме да пътуваме през пространствените измерения на статистиката.
  Днес ще си разказваме за двумерни данни. Този тип данни се използват тогава,
  когато се интересуваме от зависимостта между две променливи. Например,
  искаме да знаем дали IQ-то на хората е свързано с тяхната заплата, дали
  желанието на кравите да произвеждат мляко е свързано с тяхната независимост,
  дали количеството кексчета изядени от Пешо е свързано с неговия диабет.

  Има една планета, недалеч от тук, в която преди много, много време се опитал
  да влезе един древен астронавт. Този астронавт се казвал Влечко и разполагал
  с доволно количество фойерверки, един приятел полу-идиот и огромното желание
  да стигне звездите. Той си бил харесал една много приятна звезда, която от
  няколко месеца се мяркала по нощното небе и се движила все наляво. Тази
  звезда била Юпитер.

  Влечко някакси полетял и някакси улучил да премине покрай Луната и Марс,
  точно по такъв начин, че да го засилят към недрата на газовия гигант. След
  месеци пътуване в открития Космос и дишане на невероятно омайващия
  космически въздух, Влечко се озовал в планетата. Там той намерил
  невероятност след невероятност, но най-много го впечатлили огромните
  медузоподобни същества летящи из атмосферата на планетата. Той забелязал, че
  те били два вида - такива, които летят с пипалата напред и такива, които
  летят с пипалата назад. Още повече, той забелязал, че някои индивиди
  прекарвали по-малко от 5 часа летейки в кръг, други от 5 до 10 часа, а трети
  повече от 10 часа. Астронавтът много се зачудил дали посоката на летене
  имала връзка с дължината на полета в кръг. Поради тая причина той се
  възползвал от свръхмощния си смартфон, който по странно стечение на
  обстоятелствата се появил в ръцете му. Стартирал R и въвел данните в
  интерпретатора:

    > direction = c("F","F","B","F","B","B","F","B","F","F")
    > flytime = c(3,2,1,2,1,2,3,3,2,2)
    > table(direction, flytime)

  Влечко бил доволен от това, което видял, но от опит знаел, че данните
  говорят по-еднозначно показани чрез пропорции. За това той използвал
  функцията prop.table:

    > dirfly = table(direction, flytime)
    > options(digits = 3) # ограничаваме пропорциите до три цифри след
    + десетичната точка
    > prop.table(dirfly, 1) # редовете имат сума 1
    > prop.table(dirfly, 2) # колоните имат сума 1
    > prop.table(dirfly)    # таблицата има сума 1

  Доста ясно Влечко успял да види, че тези същества, които летели с пипалата
  назад обичали да летят доста по-дълго. Но астронавтът, макар и незнаещ как
  ще се върне на земята, решил че хората там ще са по-щастливи ако гледат
  графики. Поради тая причина той начертал няколко барплота и ги снимал:

    > colors = c("red","yellow","orange")
    > barplot(table(direction, flytime), colors)
    > barplot(table(flytime, direction), colors)
    > barplot(table(direction, flytime), beside=T, legend.text=T)
    > barplot(table(flytime, direction), main="Flying meduhsels OMG!", 
    + beside=T, legend.text=c("less than 5","5-10","more than 10"))

  Нещо глождело Влечко и това не била чистата му съвест. Той се зачудил как
  може да види каква пропорция от всяка категория дължина на полет съответства
  на типа на летене. Като гръм от неясното юпитерианско небе му дошла
  функцията apply. Тя така стремглаво се засилила към тъпата му усмивка, че
  той за малко не си изпуснал смартфона. Влечко мислил и писал, писал и не
  мислил чак толкова, но в крайна сметка измъдрил няколко реда код:

    > prop = function(x) x/sum(x)
    > apply(table(direction, flytime), 2, prop)

  prop била функцията, която щяла да бъде извикана върху всеки ред или колона
  от таблицата. Това дали ще се извика върху ред или колона, зависело от
  втория параметър на функцията apply. В случая той бил 2, така че prop щяла
  да се изпълни върху всяка колона и по този начин да даде как се съотнасят
  посоките на полетите спрямо дължината на полетите.

  Да се изпълни prop по редове, било също интересно, защото обръщало
  таблицата:
  
    > apply(table(direction, flytime), 1, prop)
    > t(apply(table(direction, flytime), 1, prop)) # нека транспонираме

  Доволен, Влечко по невнимание бил изяден от една медуза.

  Тук дошъл момента на земята да се появи никому неизвестния полицай Женчо.
  След един курс по статистика в МВР-то, Женчо решил да приложи наученото,
  сравнявайки категорни с числови данни. Той се занимавал с един случай, в
  който някакви деца все рисували със спрей по любимата му розова фасада на
  неговата къща. Тъй като Женчо не бил особено агресивен полицай, той решил да
  постъпи към решението на проблема пребоядисвайки къщата си всеки път. Един
  ден, обаче решил, че ще му е по-евтино да чисти графитите, отколкото да
  купува нова боя. Той взел две марки фасаген - една уж по-лесна за чистене,
  друга уж по-трудна за чистене. След като стоически издържал по пет
  напръсквания със спрей на всяка и покрай това развод с горката си жена, той
  събрал следните данни за чистене на стените в часове:

    > uj.fast = c(5,4,7,3,6)
    > uj.slow = c(6,7,4,5,6)

  Хванал един boxplot и ги плотнал:

    > boxplot(uj-fast, uj-slow)

  Щастлив от видимото подобрение, Женчо продължил живота си с такъв заряд и
  енергия, че децата, които всяка вечер боядисвали стените му се уплашили и
  никога повече не го закачали.

  Полицаят не знаел, обаче че данните можели да бъдат представени и по друг
  начин. Можело да има два вектора - един с всички часове за чистене и друг,
  който на всеки час съпоставял категория:

    > uj = c(5,4,7,3,6,6,7,4,5,6)
    > paint = c("F","F","F","F","F","S","S","S","S","S")
    > boxplot(uj ~ paint)

  С оператора "~" (тилда) казваме, че искаме да направим два boxplot-a, които
  показват количеството време за чистене, спрямо категориите - "F" и "S".
  Можем да го четем като "количество по категория". Съответно, ако имаме
  повече категории, количествата ще бъдат разпределени в повече boxplot-ове.

  Преди тридесет години, американците желаели да проведат тайна операция в
  северна Корея. За целта те маскирали пет свои войника като маймуни и ги
  пратили да бъдат дегустатори на банани за внос в комунистическата страна.
  Целта била, на базата на вноса на банани да определят индекса на щастието в
  страната. За жалост, след десетата пратка, войниците бидейки от мъжки
  пол, пожелали все пак да установят някакви отношения с някаква женска. След
  първия ужасен вик, последвал от влизането на пет маймуни в локалния
  офицерски бардак, американците били разстреляни. Данните, които събрали
  обаче, дали на щатите много важна информация, а именно индекса на щастието
  на севернокорейците. Той бил изразен в десетохиляди вкарани банана.
  Представял следните данни:

    > skorhi = c(64200, 72100, 87600, 59000, 83200, 49100, 79600, 69300, 93100,
    + 105400)

  За сравнение, индексът на щастието на американците бил следния:

    > usahi = c(257500, 276800, 364600, 160400, 333500, 145600, 350200, 205200,
    + 599300, 514400)

  Като се абстрахираме от факта, че американците са значително по-голям народ,
  можем да направим сравнение между тия две числови данни с помощта на три
  инструмента:
   
    boxplot - ако сета от данни е малък.
    stripchart - ако искаме много набързо да сравним двете дистрибуции.
    simple.violinplot - ако искаме да обърнем внимание и на формата на
        разпределенията.

  Използваме функцията scale за да нормализираме двете измервания.

    > bananas = data.frame(skorhi, usahi)
    > boxplot(data.frame(scale(bananas)))
    > stripchart(data.frame(scale(bananas)))
    > simple.violinplot(data.frame(scale(bananas)))

  Накрая, ако искаме да видим взаимоотношения между данните, можем да
  използваме scatterplot.

    > attach(bananas)
    > plot(old, new)
    > detach(bananas)
